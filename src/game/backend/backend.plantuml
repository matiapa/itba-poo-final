@startuml

' --------------- BACKEND --------------- '

'CandyGame'

class CandyGame{
 - grid: Grid

 + getSize(): int
 + tryMove(int,int,int,int): bool
 + get(int,int): Cell
 + addGameListener(GameListener): void

 + gameOver(): bool
 + playerWon(): bool
 + toString(): String

 + cellExplosion(Element): void
}

CandyGame *-- Grid

GameListener <-- CandyGame


' Grid '

abstract class Grid{
 - {static} SIZE: int
 - grid: Cell[][]
 - gMap: Map<Cell, Point>

 - state: GameState
 - listeners: List<GameListener>
 - moveMaker: MoveMaker
 - figureDetector: FigureDetector

 - genCell: GeneratorCell
 - gridLoadReady: bool

 # initialize(GameState): void
 # fillCells(): void
 - fallElements(): bool

 + tryMove(int,int,int,int): bool
 - swapContent(int,int,int,int): void
 + tryRemove(Cell): Figure
 - removeFigure(int, int, Figure): void

 + addListener(GameListener): void
 + gridUpdated(): void
 + cellExploded(Element): void
 + validMoveMade(): void
 + scorePanelUpdated(): void

 + getCell(int,int): Cell
 + get(int,int): Element
 + clearContent(int,int): void
 + setContent(int,int): void

 + {static} getSize(): int
 + getGridLoadReady(): bool
 # grid: Cell[][]
 # setGenCell(GeneratorCell): void
 # getState(): GameState

}

Grid *-- Cell
Grid *-- GameState
Grid *-- GameListener
Grid *-- MoveMaker
Grid *-- FigureDetector
Grid *-- GeneratorCell


' GameState '

abstract class GameState{
 - score: long
 - moves: int
 + addScore(int): void
 + getScore(): int
 + addMove(): void
 + getMoves(): int

 + {abstract} gameOver(): bool
 + {abstract} playerWon(): bool
 + toString(): String
}


' GameListener '

interface GameListener{
 + gridUpdated(): void
 + cellExplosion(): void
 + onValidMove(): void
 + scorePanelUpdated(): void
}


' --------------- CELL --------------- '

' Cell '

class Cell{
 # grid: Grid
 - around: Cell[]
 - content: Element
 - effect: CellEffect

 + setAround(): bool
 - hasFloor(): bool

 - explode(Direction): void
 - expandExplosion(Direction[]): void

 + setContent(Element): void
 + clearContent(): void
 + getContent(): Element
 + fallUpperContent(): bool
 + isEmpty(): bool
 # isMovable(): bool
 # getAndClearContent(): Element

 + getEffect(): CellEffect
 + setEffect(CellEffect): void
}

Cell *-- Element
Cell *-- CellEffect


' CellEffect '

enum CellEffect{
 GOLDEN
}


' GeneratorCell '

abstract class GeneratorCell {
  + equals(): bool
  + isEmpty(): bool
  + isMovable(): bool

  + {abstract} getContent(): Element
  + getAndClearContent(): Element
  + setContent(): void
  + fallUpperContent(): bool
}

Cell <-- GeneratorCell


' CandyGeneratorCell '

class CandyGeneratorCell {
  + getContent(): Element
}

GeneratorCell <-- CandyGeneratorCell


' SpecialCandyGeneratorCell '

abstract class SpecialCandyGeneratorCell{
 - specialCandy: Class<Candy>
 - specialCandiesToPlace
 - specialCandyFrequency
 + getContent(): Element
}

GeneratorCell <-- SpecialCandyGeneratorCell


' BombCandyGeneratorCell '

class BombCandyGeneratorCell {

}

SpecialCandyGeneratorCell <-- BombCandyGeneratorCell


' TimeBonusCandyGeneratorCell '

class TimeBonusCandyGeneratorCell {

}

SpecialCandyGeneratorCell <-- TimeBonusCandyGeneratorCell



' --------------- ELEMENT --------------- '

' Element '

abstract class Element{
 # grid: Grid
 + {abstract} isMovable(): bool
 + {abstract} getKey(): String
 + {abstract} getScore(): int
 + {abstract} explode(): Direction[]
 + isSolid(): bool
}


' Bomb '

class Bomb{
 + isMovable(): bool
 + getKey(): String
 + getScore(): int
}

Element <-- Bomb


' Wall '

class Wall{
 + isMovable(): bool
 + getKey(): String
}

Element <-- Wall


' Nothing '

class Nothing{
 + isSolid(): bool
 + isMovable(): bool
 + getKey(): String
}

Element <-- Nothing


' Candy '

class Candy{
 - candyColor: CandyColor
 + getColor(): CandyColor
 + setColor(CandyColor): void
 + isMovable(): bool
 + equals(): bool
 + getKey(): String
 + getScore(): long
}

Element <-- Candy
Candy *-- CandyColor


' CandyColor '

enum CandyColor{
 RED, GREEN, BLUE, YELLOW, ORANGE, PURPLE
}


' BombCandy '

class BombCandy{
 - remainingMoves: int
 + getRemainingMoves(): int
 + explode(): Direction[]
}

Candy <-- BombCandy


' TimeBonusCandy '

class TimeBonusCandy{
 + getAdditionalTime(): void
 + explode(): Direction[]
}

Candy <-- TimeBonusCandy


' HorizontalStripedCandy '

class HorizontalStripedCandy{
 - explosion: Direction[]
 + explode(): Direction[]
 + getKey(): String
 + getScore(): long
}

Candy <-- HorizontalStripedCandy


' VerticalStripedCandy '

class VerticalStripedCandy{
 - explosion: Direction[]
 + explode(): Direction[]
 + getKey(): String
 + getScore(): long
}

Candy <-- VerticalStripedCandy


' WrappedCandy '

class WrappedCandy{
 - explosion: Direction[]
 + explode(): Direction[]
 + getKey(): String
 + getScore(): long
}

Candy <-- WrappedCandy



' --------------- MOVES --------------- '

' MoveMaker '

class MoveMaker{
 - map: Map<String, Move>
 - grid: Grid
 - initMap(): void
 + getMove(i1,j1,i2,j2): Move
}

MoveMaker *-- Move

' IRR ' MoveMaker *-- Grid


' Move '

class Move{
 - grid: Grid
 - specialAction: SpecialAction
 # i1, j1, i2, j2: int
 + setCoords(int,int,int,int): void
 + isValid(): bool
 + executeSpecialAction(): void
}

Move *-- SpecialAction


' SpecialAction '

enum SpecialAction{
 WALL_HOR_REMOVE, WALL_VERT_REMOVE
}

' IRR ' Move *-- Grid

@enduml